# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agile_v_core/kinematics.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class kinematics(genpy.Message):
  _md5sum = "106ad333403d5f1ecfca19cf013ec05f"
  _type = "agile_v_core/kinematics"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Vehicle Center Kinematics on Vehicle Coordinates, MKS Units Mandatory.
float64[2]   CM_Velocity
float64[2]   CM_Acceleration
float64     Vehicle_Heading
float64     CM_AngularVel
float64     CM_AngularAcc

# Wheel Kinematics
float64[4]   Wheel_LinearVel
float64[4]   Wheel_SteerAngl

# Time Stamp
time        Time_Stamp
"""
  __slots__ = ['CM_Velocity','CM_Acceleration','Vehicle_Heading','CM_AngularVel','CM_AngularAcc','Wheel_LinearVel','Wheel_SteerAngl','Time_Stamp']
  _slot_types = ['float64[2]','float64[2]','float64','float64','float64','float64[4]','float64[4]','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       CM_Velocity,CM_Acceleration,Vehicle_Heading,CM_AngularVel,CM_AngularAcc,Wheel_LinearVel,Wheel_SteerAngl,Time_Stamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(kinematics, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.CM_Velocity is None:
        self.CM_Velocity = [0.] * 2
      if self.CM_Acceleration is None:
        self.CM_Acceleration = [0.] * 2
      if self.Vehicle_Heading is None:
        self.Vehicle_Heading = 0.
      if self.CM_AngularVel is None:
        self.CM_AngularVel = 0.
      if self.CM_AngularAcc is None:
        self.CM_AngularAcc = 0.
      if self.Wheel_LinearVel is None:
        self.Wheel_LinearVel = [0.] * 4
      if self.Wheel_SteerAngl is None:
        self.Wheel_SteerAngl = [0.] * 4
      if self.Time_Stamp is None:
        self.Time_Stamp = genpy.Time()
    else:
      self.CM_Velocity = [0.] * 2
      self.CM_Acceleration = [0.] * 2
      self.Vehicle_Heading = 0.
      self.CM_AngularVel = 0.
      self.CM_AngularAcc = 0.
      self.Wheel_LinearVel = [0.] * 4
      self.Wheel_SteerAngl = [0.] * 4
      self.Time_Stamp = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_2d().pack(*self.CM_Velocity))
      buff.write(_get_struct_2d().pack(*self.CM_Acceleration))
      _x = self
      buff.write(_get_struct_3d().pack(_x.Vehicle_Heading, _x.CM_AngularVel, _x.CM_AngularAcc))
      buff.write(_get_struct_4d().pack(*self.Wheel_LinearVel))
      buff.write(_get_struct_4d().pack(*self.Wheel_SteerAngl))
      _x = self
      buff.write(_get_struct_2I().pack(_x.Time_Stamp.secs, _x.Time_Stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Time_Stamp is None:
        self.Time_Stamp = genpy.Time()
      end = 0
      start = end
      end += 16
      self.CM_Velocity = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 16
      self.CM_Acceleration = _get_struct_2d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.Vehicle_Heading, _x.CM_AngularVel, _x.CM_AngularAcc,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 32
      self.Wheel_LinearVel = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 32
      self.Wheel_SteerAngl = _get_struct_4d().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.Time_Stamp.secs, _x.Time_Stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      self.Time_Stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.CM_Velocity.tostring())
      buff.write(self.CM_Acceleration.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.Vehicle_Heading, _x.CM_AngularVel, _x.CM_AngularAcc))
      buff.write(self.Wheel_LinearVel.tostring())
      buff.write(self.Wheel_SteerAngl.tostring())
      _x = self
      buff.write(_get_struct_2I().pack(_x.Time_Stamp.secs, _x.Time_Stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Time_Stamp is None:
        self.Time_Stamp = genpy.Time()
      end = 0
      start = end
      end += 16
      self.CM_Velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 16
      self.CM_Acceleration = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      _x = self
      start = end
      end += 24
      (_x.Vehicle_Heading, _x.CM_AngularVel, _x.CM_AngularAcc,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 32
      self.Wheel_LinearVel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 32
      self.Wheel_SteerAngl = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      _x = self
      start = end
      end += 8
      (_x.Time_Stamp.secs, _x.Time_Stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      self.Time_Stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
