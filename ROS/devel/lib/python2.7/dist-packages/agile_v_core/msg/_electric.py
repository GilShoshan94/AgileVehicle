# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agile_v_core/electric.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class electric(genpy.Message):
  _md5sum = "c6bc6c3c8d1a9c04520cae2eed8a6f9d"
  _type = "agile_v_core/electric"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[4] voltage
float32[4] pwrDriving
float32[4] pwrSteering
float32[4] pwrTotal
float32[4] AmpDriving
float32[4] AmpSteering
float32[4] UnitAmp

"""
  __slots__ = ['voltage','pwrDriving','pwrSteering','pwrTotal','AmpDriving','AmpSteering','UnitAmp']
  _slot_types = ['float32[4]','float32[4]','float32[4]','float32[4]','float32[4]','float32[4]','float32[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       voltage,pwrDriving,pwrSteering,pwrTotal,AmpDriving,AmpSteering,UnitAmp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(electric, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.voltage is None:
        self.voltage = [0.] * 4
      if self.pwrDriving is None:
        self.pwrDriving = [0.] * 4
      if self.pwrSteering is None:
        self.pwrSteering = [0.] * 4
      if self.pwrTotal is None:
        self.pwrTotal = [0.] * 4
      if self.AmpDriving is None:
        self.AmpDriving = [0.] * 4
      if self.AmpSteering is None:
        self.AmpSteering = [0.] * 4
      if self.UnitAmp is None:
        self.UnitAmp = [0.] * 4
    else:
      self.voltage = [0.] * 4
      self.pwrDriving = [0.] * 4
      self.pwrSteering = [0.] * 4
      self.pwrTotal = [0.] * 4
      self.AmpDriving = [0.] * 4
      self.AmpSteering = [0.] * 4
      self.UnitAmp = [0.] * 4

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_4f().pack(*self.voltage))
      buff.write(_get_struct_4f().pack(*self.pwrDriving))
      buff.write(_get_struct_4f().pack(*self.pwrSteering))
      buff.write(_get_struct_4f().pack(*self.pwrTotal))
      buff.write(_get_struct_4f().pack(*self.AmpDriving))
      buff.write(_get_struct_4f().pack(*self.AmpSteering))
      buff.write(_get_struct_4f().pack(*self.UnitAmp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 16
      self.voltage = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.pwrDriving = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.pwrSteering = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.pwrTotal = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.AmpDriving = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.AmpSteering = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.UnitAmp = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.voltage.tostring())
      buff.write(self.pwrDriving.tostring())
      buff.write(self.pwrSteering.tostring())
      buff.write(self.pwrTotal.tostring())
      buff.write(self.AmpDriving.tostring())
      buff.write(self.AmpSteering.tostring())
      buff.write(self.UnitAmp.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 16
      self.voltage = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.pwrDriving = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.pwrSteering = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.pwrTotal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.AmpDriving = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.AmpSteering = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.UnitAmp = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
